[{"uri":"https://hotloncon1.github.io/aws-lab000052/","title":"Create a Microservice","tags":[],"description":"","content":"Create a Microservice Oveview In this lab, you will learn how to create an AWS Lambda function that is triggered when files are uploaded to an Amazon S3 bucket. You will upload your code for the Lambda function, and then manually wire-up an S3 event trigger to invoke the function and view the output logs. Then you will iterate on the code to add functionality to allow it to process files of different types - specifically, to create thumbnails for JPG images, and delete all other file types. Finally, you will create a deployment package and automate the deployment of the function and associated triggers and S3 buckets, using the AWS CLI.\nContent: Introduction Preparation Create a Serverless Microservice Extending Serverless Microservices Configure orchestration with CodeStar Challenge - Expose the microservice API Clean up resources "},{"uri":"https://hotloncon1.github.io/aws-lab000052/5-use-codestar-orchestration/5.1-create-new-branch/","title":"Create a new branch","tags":[],"description":"","content":"Create a new branch Now you have had hands-on experience creating and deploying AWS Lambda functions, it is time to return to our monolithic TravelBuddy application, and deploy a microservice on AWS Lambda managed through a CI/CD pipeline created with AWS CodeStar.\nGo to AWS CodeStar Console. Click Projects Click Create project Click Create service role if you never go to AWS CodeStar Service before.\nGo to Templates section, seclect Java, Web Service and AWS Lambda Select Java Spring Click Next In the Project name section, type dev-flight-svc Select Code Commit Click Next In the Review page, click Create project Add the user awsstudent to the Team as Owner. Click Team Click Add team member Go to Team member details section In the User section, seclect awsstudent In the Email address section, type your email In the Project role section, seclect Owner CLick Allow SSH access to project instances. Click Add team member Check added team member Go to AWS CloudFormation Console. Type aws-stack-for-Devax-lab03 to the search bar and press Enter. Click aws-stack-for-Devax-lab03. Click Output Save the GitPassword value and the GitUserName value In the Eclipse IDE, Find the AWS Icon and click it to reveal the menu Click Import AWS CodeStar Project Select the Region we use in this lab Select dev-flight-svc Type the saved information in the step 9 into User name section and Password section Click Next Click OK, ignore the error org.eclipse.egit.ui.internal.repository.tree.RepositoryTreeNodeType.getIcon()Lorg/eclipse/swt/graphics/Image; Select branch master Click Next. Click Finish Click No to skip setup password hint "},{"uri":"https://hotloncon1.github.io/aws-lab000052/3-create-serverless-microservices/3.1-create-lambda-function/","title":"Create and test Lambda function locally","tags":[],"description":"","content":"Create and test Lambda function locally Open Eclipse IDE in the Windows virtual machine. select the AWS toolkit icon to expand the menu Click New AWS Lambda Java Project… In the New AWS Lambda Maven Project dialog In the Project name section, type TestLambda In the Group ID section, type idevelop.lambda In the Artifact ID section, type s3handler Click Finish We need to update the pom.xml file that Maven uses to newer version of Mockito for our tests Open the TestLambda project Open the pom.xml file Find the dependency section whose artifactId is mockito-core and replace the version value with 3.3.3 Save Run the JUnit Test Right-click on the TestLambda project. Click Run As Click JUnit Test You will see outputs from the lambda function, as if it were triggered by a file uploaded to S3. The parameters for the test are provided in the test resources, in the form of a JSON payload which resembles the payload the Amazon environment will send to the Lambda function, when the S3 bucket associated with this Lambda function receives an uploaded file. You may see some WARNINGS regarding profile name. You can safely ignore those warnings for this lab.\nTo see the output of the tests, click on the JUnit tab Examine the S3-event.put.json file. The S3-event.put.json file contains the required schema and values that we will use for this lab. You may see a warning regarding node being missing. You can safely ignore those warnings for this lab.\nUpdate the provided code to handle URL encoded keys The source code provided by the tooling does not take into consideration the encoding applied to the key name provided in the S3 event when it is sent to your Lambda function, and so, if you upload a file for testing, and the file contains spaces or punctuation (for example) then the string needs to be decoded before you use it.\nOpen the LambdaFunctionHandler.java file whose path is src/main/java/idevelop.lambda.s3handler/LambdaFunctionHandler.java Add this code after line 28 and save try { key = java.net.URLDecoder.decode(key, \u0026#34;UTF-8\u0026#34;); } catch(Exception ex) { context.getLogger().log(\u0026#34;Could not decode URL for keyname... continuing...\u0026#34;); } "},{"uri":"https://hotloncon1.github.io/aws-lab000052/2-prepare/2.1-createkeypair/","title":"Create Key Pair","tags":[],"description":"","content":"Create Key Pair Go to Amazon EC2 console. On the left navigation bar, click Key Pairs. Click Create key pair. In the Create key pair page In the Name section, type KPforDevAxInstances In the Key pair type section, Select RSA In the Private key file format section, select .pem Click Create key pair Save file key pair to use in the next step. "},{"uri":"https://hotloncon1.github.io/aws-lab000052/4-extending-serverless-microservices/4.1-deploy-imagemanager-lambda/","title":"Deploy ImageManager Lambda Function","tags":[],"description":"","content":"Deploy ImageManager Lambda Function You will edit the code in the handleRequest override (in LambdaFunctionHandler.java) so that if the contentType is not image/jpeg the file will be deleted by the Lambda function. This simulates a scenario where, if a file with the wrong content type is uploaded, the handler will discard the file, and not process it. Further, if the file is image/jpeg the Lambda function should resize the image and move it to a target bucket so your application can use it.\nOpen the LambdaFunctionHandler.java file whose path is src/main/java/idevelop.lambda.s3handler/LambdaFunctionHandler.java Find the following line context.getLogger().log(\u0026#34;CONTENT TYPE: \u0026#34; + contentType); After that line, add switch logic to call two different handlers - one for an image type and another for a non-image type switch ( contentType ) { case \u0026#34;application/x-directory\u0026#34;: System.out.println(\u0026#34;application/x-directory detected - ignoring\u0026#34;); break; case \u0026#34;image/jpeg\u0026#34;: System.out.println(\u0026#34;image/jpeg detected\u0026#34;); InputStream objectData = null; objectData = response.getObjectContent(); handleJPEG(bucket, key, objectData); break; default: handleAllOtherContentTypes(bucket, key); break; } 2. Add the following content at the end of the LambdaFunctionHandler.java file, just before the closing brace.\nprivate void handleJPEG(String bucketName, String key, InputStream imageStream) { final int THUMBNAIL_WIDTH = 100; final int THUMBNAIL_HEIGHT= 100; try { System.out.println(\u0026#34;Starting resize process...\u0026#34;); System.out.println(String.format( \u0026#34;Starting resize process for %s/%s of type image/jpg\u0026#34;, bucketName, key)); // Resize the image System.out.println(\u0026#34; Reading image stream from S3\u0026#34;); BufferedImage image = ImageIO.read(imageStream); System.out.println(\u0026#34; done\u0026#34;); final BufferedImage thumbnailImage = new BufferedImage(THUMBNAIL_WIDTH, THUMBNAIL_HEIGHT, BufferedImage.TYPE_INT_RGB); final Graphics2D graphics2D = thumbnailImage.createGraphics(); graphics2D.setComposite(AlphaComposite.Src); graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR); graphics2D.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY); graphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON); System.out.println(\u0026#34; Drawing image...\u0026#34;); graphics2D.drawImage(image, 0, 0, THUMBNAIL_WIDTH, THUMBNAIL_HEIGHT, null); System.out.println(\u0026#34; done\u0026#34;); graphics2D.dispose(); System.out.println(\u0026#34; Opening output file...\u0026#34;); File fileThumbnail = new File(\u0026#34;/tmp/thumbnail.jpg\u0026#34;); System.out.println(\u0026#34; done\u0026#34;); System.out.println(\u0026#34; Writing output file...\u0026#34;); ImageIO.write(thumbnailImage, \u0026#34;jpg\u0026#34;, fileThumbnail); System.out.println(\u0026#34; done\u0026#34;); // // Now put the finished object into the /processed subfolder // Note that the filename manipulation here is not meant to be // production-ready and robust! It will break if files without extensions // are uploaded! // String fileName = key.substring( key.lastIndexOf(\u0026#39;/\u0026#39;) + 1, key.length() ); String fileNameWithoutExtn = fileName.substring(0, fileName.lastIndexOf(\u0026#39;.\u0026#39;)); System.out.println(\u0026#34; Pushing output file to processed folder...\u0026#34;); s3.putObject(bucketName, \u0026#34;processed/\u0026#34; + fileNameWithoutExtn + \u0026#34;.thumb.jpg\u0026#34;, fileThumbnail); System.out.println(\u0026#34; done\u0026#34;); } catch(Exception e) { System.out.println(String.format( \u0026#34;Error processing JPEG image from stream for %s/%s\u0026#34;, bucketName, key)); System.out.println(e.getMessage()); } finally { System.out.println(\u0026#34;Ended resize\u0026#34;); } } private void handleAllOtherContentTypes(String bucketName, String key) { System.out.println(String.format( \u0026#34;%s/%s is an unsupported file type. It will be deleted.\u0026#34;, bucketName, key)); s3.deleteObject(bucketName, key); System.out.println(\u0026#34; Done!\u0026#34;); } 3. Add the following content at the head of the LambdaFunctionHandler.java file and save\nimport java.awt.AlphaComposite; import java.awt.Graphics2D; import java.awt.RenderingHints; import java.awt.image.BufferedImage; import java.io.File; import java.io.InputStream; import javax.imageio.ImageIO; LambdaFunctionHandler file LambdaFunctionHandler.java (5 KB) If you are confused, you can see the above LambdaFunctionHandler.java file. In the Command Prompt, navigate to the directory of the TestLambda project Execute the following command to build mvn package When the target JAR is built, which is in the target folder of the TestLambda project and whose name is s3handler-1.0.0.jar Go to AWS Lambda Console Click Functions. Type TestLambda to the search bar and press Enter. Click TestLambda To provide the function package, in the Code soure section Click Upload from Click .zip or .jar file Click Upload, Select file s3handler-1.0.0.jar in the target folder of the TestLambda project Click Save It will take a few moments to upload Go to AWS S3 Console Type idevelop-imagemanager to the search bar Click the S3 bucket whose name start with idevelop-imagemanager Click uploads/ Click Upload Click Add files Select file Puppy.jpg we downloaded previously Click Upload Click Close Click idevelop-imagemanager- Click the processed folder We uploaded the Puppy.jpg image to the uploads folder. We will see a thumbnail of the image is placed in the processed/ folder in the root of the same bucket. The processed/ folder will be created automatically by the Lambda function when it creates the output thumbnail file. Go to AWS Lambda Console Click Functions. Type TestLambda to the search bar and press Enter. Click TestLambda Click Monitor Click View logs in CloudWatch Click the first Log stream in the Log streams table We will see the process in the CloudWatch logs Upload a non-image file to the uploads/ folder (Do the same step 10, 11, 12 and 13) Click Close We will see the Module1.template.yaml file is automatically deleted The Module3.template.yaml file we had uploaded before we update the Lambda function. Therefore, it is not automatically deleted\nDo the same the step 18, 19, 20 and 21 to see the process in the CloudWatch logs. Go to AWS S3 Console Type idevelop-imagemanager to the search bar Click the S3 bucket whose name starts with idevelop-imagemanager Click the processed/ folder Click the Puppy.thumb.jpg file Click the link in the Object URL section We will receive an Access Denied message. This is because the S3 bucket policy is not set to allow anonymous read access to the bucket. Click idevelop-imagemanager Select the processed/ folder Click Actions Click Make public using ACL Click Make public Access to this file again. You will then be able to view the processed files in the web browser. "},{"uri":"https://hotloncon1.github.io/aws-lab000052/1-introduction/","title":"Introduction","tags":[],"description":"","content":"Introduction In this lab, you will learn how to create an AWS Lambda function that is triggered when files are uploaded to an Amazon S3 bucket. You will upload your code for the Lambda function, and then manually wire-up an S3 event trigger to invoke the function and view the output logs. Then you will iterate on the code to add functionality to allow it to process files of different types - specifically, to create thumbnails for JPG images, and delete all other file types. Finally, you will create a deployment package and automate the deployment of the function and associated triggers and S3 buckets, using the AWS CLI.\nThe final version will perform the following tasks:\nFirst, a file is uploaded to an S3 bucket Amazon S3 triggers the AWS Lambda function associated with the PutObject action and provides metadata to describe the file The Lambda function inspects the content type of the file and if it is not an image/jpeg file, the file is deleted. If the file is an image/jpeg file, the code will generate a thumbnail of the image and store the thumbnail in a different folder in the same bucket. Later in the lab, you will return to the TravelBuddy web application, and deploy parts of the monolithic codebase as a standalone microservices, making use of AWS CodeStar to create the CI/CD pipeline.\nTopics Covered By the end of this lab, you will be able to:\nUse the Eclipse IDE to create and deploy an AWS Lambda function. Edit the supplied generic Java Lambda function source code to resize images as thumbnails or delete non-image files, and wire-up a trigger to an S3 bucket to test the feature. Use AWS Serverless Application Model(SAM) and AWS CloudFormation to create a template to automate the deployment of your Lambda function an S3 trigger and an S3 bucket. Identify a microservice candidate in a monolithic codebase, and create a AWS CodeStar project to manage a CI/CD pipeline for that microservice hosted in AWS Lambda. Technical Knowledge Prerequisites To successfully complete this lab, you should be familiar with basic navigation of the AWS Management Console and be comfortable editing scripts using a text editor.\nEnvironment The following diagram depicts the resources that were deployed in your AWS account. "},{"uri":"https://hotloncon1.github.io/aws-lab000052/4-extending-serverless-microservices/4.2-automating-your-microservice/","title":"Automating Your Serverless Microservice","tags":[],"description":"","content":"Automating Your Serverless Microservice In the previous exercise, you used the Eclipse IDE to create using the AWS Toolkit for Eclipse and update a Lambda function. This allowed you to manually initiate automatic upload of your Lambda function. However, this mechanism may not be convenient for automating deployment steps for functions, or coordinating deployments and updates to other elements of a serverless application, such as event sources and downstream resources. For example, the Eclipse IDE does not give you the ability to deploy and update the S3 bucket and wire up the S3 PUT OBJECT trigger, together with your Lambda function as one deployment unit.\nYou can use AWS CloudFormation to easily specify, deploy, and configure serverless applications. AWS CloudFormation is a service that helps you model and set up your Amazon Web Services resources so that you can spend less time managing those resources and more time focusing on your applications that run in AWS. You create a template that describes all the AWS resources that you want (like Lambda functions and S3 buckets), and AWS CloudFormation takes care of provisioning and configuring those resources for you.\nIn addition, you can use the AWS Serverless Application Model (SAM) to express resources that comprise the serverless application. These resource types, such as AWS Lambda functions and APIs, are fully supported by AWS CloudFormation and make it easier for you to define and deploy your serverless application.\nIn this exercise, you will use AWS CLI and **AWS CloudFormation/SAM **to package up your solution and deploy it from scratch, without having to manually create or configure any dependencies.\nIn the Eclipse IDE, right-click on the TestLambda project Click New Click File In the File name section, điền template.yaml Click Finish The template.yaml file in the same folder as the pom.xml file of the TestLambda project Repalce the content of the template.yaml file with the following content AWSTemplateFormatVersion: \u0026#39;2010-09-09\u0026#39; Transform: \u0026#39;AWS::Serverless-2016-10-31\u0026#39; Description: Testing lambda and S3 Resources: TestLambda: Type: \u0026#39;AWS::Serverless::Function\u0026#39; Properties: Handler: idevelop.lambda.s3handler.LambdaFunctionHandler Runtime: java8 CodeUri: target/s3handler-1.0.0.jar Description: Testing lambda and S3 MemorySize: 512 Timeout: 15 Role: !Sub arn:aws:iam::${AWS::AccountId}:role/LambdaRole Events: CreateThumbnailEvent: Type: S3 Properties: Bucket: Ref: ImageManagerSrcBucket Events: - \u0026#39;s3:ObjectCreated:Put\u0026#39; Filter: S3Key: Rules: - Name: prefix Value: uploads/ ImageManagerSrcBucket: Type: AWS::S3::Bucket Properties: BucketName: !Sub idevelop-imagemanager-${AWS::AccountId} Save We will use the AWS CLI to push the template.yaml file to an S3 bucket where it can then be deployed In the Command prompt, Execute the following command aws cloudformation package --template-file template.yaml --s3-bucket \u0026lt;YOUR_CODE_BUCKET_NAME\u0026gt; --output-template deploy-template.yaml --profile devaxacademy Repale \u0026lt;YOUR_CODE_BUCKET_NAME\u0026gt; with the name of the S3 bucket whose name starts with idevelop-sourcecode we created\nIf you see an error message similar to ‘NoneType’ object has no attribute ‘items’ check the formatting of your template.yaml file. This error indicates a problem with the indentation!\nThe aws cloudformation package command takes the AWS SAM template provided and re-writes it in terms of the artefacts automatically uploaded to the specified S3 bucket. In this case deploy-template.yaml is created, and contains the CodeUri value that points to the deployment zip in the Amazon S3 bucket that you specified. This template represents your serverless application.\n5. You are now ready to deploy the JAR artifact as a Lambda function, and wire-up the S3 trigger to a new S3 bucket. You will notice the last output from the previous command instructs us what to run in order to deploy the packaged template\nIn the Command prompt, Execute the following command aws cloudformation deploy --template-file deploy-template.yaml --stack-name ImageManagerDemo --profile devaxacademy 6. Go to Amazon CloudFormation Console.\nClick Stacks Type ImageManagerDemo to the search bar and press Enter We will see the CloudFormation stack whose name is ImageManagerDemo was created You can watch the progress of the creation of the resources directly in the CloudFormation console. The CloudFormation template creates a new S3 Bucket called idevelop-imagemanager-\u0026lt;YOUR_ACCOUNT_ID\u0026gt; where \u0026lt;YOUR_ACCOUNT_ID\u0026gt; is AWS account ID assigned to your lab environment.\nThe template also creates a new Lambda function called ImageManagerDemo-TestLambda-XXXXXX where XXXXXX is a random identifier allocated by CloudFormation to ensure uniqueness of the function name.\nGo to AWS S3 Console Type idevelop-imagemanager to the search bar Click S3 bucket idevelop-imagemanager-\u0026lt;YOUR_ACCOUNT_ID\u0026gt; Click Create folder In the Folder name section, type uploads Click Create folder Click the uploads/ folder Click Upload Click Add files Select the Puppy.jpg file we downloaded CLick Add files Select the non-image file Click Upload Click Close We will see that non-image file is automatically deleted Click idevelop-imagemanager-\u0026lt;YOUR_ACCOUNT_ID\u0026gt; Click the processed folder We will see a thumbnail of the Puppy.jpg file Go to Amazon CloudFormation Console. Click Stacks Type ImageManagerDemo to the search bar Enter Click the name of the CloudFormation stack Click Monitor Click View logs in CloudWatch Click the first Log stream in the Log streams table We see the process in the CloudWatch log "},{"uri":"https://hotloncon1.github.io/aws-lab000052/2-prepare/2.2-createstack/","title":"Create a CloudFormation stack","tags":[],"description":"","content":"Create a CloudFormation stack Template File Module3.template.yaml (39 KB) Download file Module3.template.yaml. Go to Amazon CloudFormation Console. Click Stacks Click Create stack. Click With new resources (standard). In the Specify template section. Select Upload a template file Click Choose file, then select file Module3.template.yaml we downloaded. Click Next. In the Stack name section, type aws-stack-for-Devax-lab03. In the EEKeyPair section, seclect KPforDevAxInstances. Click Next. In the Configure stack options page, Drag the screen down, then Click Next. In the Review page. Drag the screen down, then Click I acknowledge that AWS CloudFormation might create IAM resources with custom names. Click Create stack. Cloudformation will take 5 minutes to deploy Web App. Wait until all stacks are shown in a CREATE_COMPLETE state.\n"},{"uri":"https://hotloncon1.github.io/aws-lab000052/2-prepare/","title":"Preparation","tags":[],"description":"","content":"Overview In this section, we will create the Key Pair, create the CloudFormation stack, connect to the Windows instance and setup the S3 bucket .\nContent: Create the Key Pair Create the CloudFormation stack Connect to the Windows instance Setup S3 buckets "},{"uri":"https://hotloncon1.github.io/aws-lab000052/5-use-codestar-orchestration/5.2-redeploy-through-cicd-pipeline/","title":"Redeploy through the CI/CD pipeline","tags":[],"description":"","content":"Redeploy through the CI/CD pipeline In the Command Prompt, navigate to the directory of the dev-flight-svc project Execute the following command to create a new branch git checkout -b \u0026#34;new-implementation\u0026#34; FlightSpecials file FlightSpecials.zip (8525 KB) Download the FlightSpecials.zip file Extract Copy the contents of the FlightSpecials extracted project In the Eclipse IDE, right-click on the dev-flight-svc project. Click Show In Click System Explorer. Delete the contents of the /src folder and the /target folder of the dev-flight-svc project before copying. Copy the contents of the FlightSpecials project to the folder we opened in the step 3 If you don\u0026rsquo;t delete the contents of the /src folder and the /target folder before copying, the process of building will be error because we don\u0026rsquo;t configure HelloWorldController / Handler.\nIn the Eclipse IDE, right-click on the dev-flight-svc project. Click Maven Click Update Project\u0026hellip; Click OK As part of our microservice setup, we will be using VPC integration and assigning a new IAM Role to our Lambda function to allow it to perform various tasks. When CodeStar created our project, it created an IAM Role that gave CloudFormation just enough permissions to deploy the Hello World example service. These permissions are not enough for our more advanced requirements. So we need to adjust the policies assigned to the CloudFormation role, to extend those permissions.\nGo to AWS IAM Console. Click Roles. Type CodeStarWorker-dev-flight-svc-CloudFormation to the search bar Click CodeStarWorker-dev-flight-svc-CloudFormation Click Add permissions Click Create inline policy Click tab JSON Paste the following content { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Action\u0026#34;: [ \u0026#34;iam:GetRole\u0026#34;, \u0026#34;iam:CreateRole\u0026#34;, \u0026#34;iam:DeleteRole\u0026#34;, \u0026#34;iam:PassRole\u0026#34;, \u0026#34;iam:PutRolePolicy\u0026#34;, \u0026#34;iam:DeleteRolePolicy\u0026#34;, \u0026#34;lambda:ListTags\u0026#34;, \u0026#34;lambda:TagResource\u0026#34;, \u0026#34;lambda:UntagResource\u0026#34;, \u0026#34;lambda:AddPermission\u0026#34;, \u0026#34;ec2:DescribeSecurityGroups\u0026#34;, \u0026#34;ec2:DescribeSubnets\u0026#34;, \u0026#34;ec2:DescribeVpcs\u0026#34;, \u0026#34;ec2:CreateNetworkInterface\u0026#34;, \u0026#34;ec2:AttachNetworkInterface\u0026#34;, \u0026#34;ec2:DescribeNetworkInterfaces\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34; } ] } Click Review policy In the Name section, type idevelopCodeStarCloudFormationPolicy Click Create policy When attached to the CodeStarWorker-dev-flight-svc-CloudFormation role, the permissions in the idevelopCodeStarCloudFormationPolicy policy allow CloudFormation to act on your behalf when deploying the changes to your environment, and include authority to allow the Lambda function to attach to the VPC where the RDS instance that hosts our TravelBuddy website is deployed. They also allow CloudFormation to create a new IAM Role that the Lambda function will use to execute.\nThe CloudFormation template template.yml that was provided as part of the FlightSpecials.zip file has some placeholder values that you need to update to match the values from your lab account before you can deploy the updates. These include Subnet Ids, Security Group Ids and the RDS Instance Endpoint, which are unique to your lab account and unknown at this stage to the template. Go to Amazon EC2 console. Click Security Groups. Type DBSecurityGroup to the search bar and press Enter Save the Security Group Id value of the DBSecurityGroup Security Group Go to Amazon VPC console. Click Subnets. Type Module3/DevAxNetworkVPC/privateSubnet to the search bar and press Enter Save the Subnet ID value of the Module3/DevAxNetworkVPC/privateSubnet1 subnet and the Subnet ID value of the Module3/DevAxNetworkVPC/privateSubnet2 subnet Go to AWS CloudFormation Console. Type aws-stack-for-Devax-lab03 to the search bar and press Enter. Click aws-stack-for-Devax-lab03. Click Output Save the RDSEndpoint value In the Eclipse IDE, open the template.yml the Replace sg-\u0026lt;REPLACE\u0026gt; the Security Group Id value of the DBSecurityGroup Security Group we saved in the step 11 Replace subnet-\u0026lt;REPLACE\u0026gt; with the Subnet ID value of the Module3/DevAxNetworkVPC/privateSubnet1 subnet and the Subnet ID value of the Module3/DevAxNetworkVPC/privateSubnet2 with subnet we saved in the step 12 Replace \u0026lt;RDSEndpoint\u0026gt; with the RDSEndpoint value we saved in the step 14 Save "},{"uri":"https://hotloncon1.github.io/aws-lab000052/3-create-serverless-microservices/3.2-update-and-test/","title":"Upload and test Lambda function on AWS Lambda","tags":[],"description":"","content":"Upload and test Lambda function on AWS Lambda We will now deploy the Lambda function to your account so you can test it. Right-click on the LambdaFunctionHandler.java class in the src/main/java/idevelop.lambda.s3handler element Click AWS Lambda Click Run function on AWS Lambda… Click Upload now Select your Region Select Create a new Lambda function. The name of the Lambda function is TestLambda Click Next In the description section, type Test AWS Lambda function triggered by S3 upload In the IAM role section, select LambdaRole which has been created automatically by the lab setup. In the S3 bucket section, select the S3 bucket whose name starts with idevelop-sourcecode- we created in the prerequisites section to host our Lambda source code Select Finish to upload the function into your AWS Account. It will take a few moments to upload. Go to AWS Lambda Console Click Functions. Type TestLambda to the search bar and press Enter. We will see the TestLambda function is uploaded. Click TestLambda Click Add Triggers In the Trigger configuration section, select S3 In the Bucket section, select the S3 bucket whose name starts with idevelop-imagemanager- we created for uploads the images previously In the Event type section, select All Object create events In the Prefix section, type uploads/. Click I acknowledge that using the same S3 bucket for both input and output is not recommended and that this configuration can cause recursive invocations, increased Lambda usage, and increased costs. Click Add We will now test the function. Go to AWS S3 Console Type idevelop-imagemanager to the search bar Click the S3 bucket whose name starts with idevelop-imagemanager Click Create folder In the Create folder page In the Folder name section, type uploads Click Create folder Click uploads/ to open the uploads folder Puppy image Puppy.jpg (125 KB) Download the Puppy.jpg file\nClick Upload Click Add files\nSelect the Puppy.jpg file we downloaded in the step 12 Click Upload Once the upload is complete Go to AWS Lambda Console Click Funtions Type TestLambda to the search bar and press Enter Click TestLambda Click the Monitor tab You will see 2 invocation counts and their associated invocation durations in the graphs. You see two because one is the creation of the uploads/ folder, and the other is the upload of the Puppy.jpg image. Click View logs in CloudWatch to open the CloudWatch logs for this Lambda function. We will see the logged log streams Click the first log steam to see the detail information Notice that you will see the CONTENT TYPE output, as per the code that we have uploaded. In the first event, the CONTENT TYPE is application/x-directory and the second mention of CONTENT TYPE notes the type as image/jpeg. The sample lambda function code provided by the New Lambda Function wizard simply logs the CONTENT TYPE of the file, with no other processing. We will change this behaviour shortly.\nUpload an any file is not a image (do the same the step 13 and 14). Inspect the logs (do the same the step 15, 16 and 17) "},{"uri":"https://hotloncon1.github.io/aws-lab000052/4-extending-serverless-microservices/4.3-update-lambda-function/","title":"(Optional) - Update Lambda function permissions","tags":[],"description":"","content":"(Optional) - Update Lambda function permissions Go to AWS Lambda Console Click Functions. Type ImageManagerDemo to the search bar and press Enter. Click the name of the Lambda Function If we view the triggers against the Lambda function in the AWS console, we will notice that the S3 trigger does not appear, even though it functions as expected. This is because the Lambda function itself does not know about the S3 bucket trigger - S3 knows about the Lambda function it will trigger when an event fires, but not the other way around. Execute the following command aws lambda add-permission --function-name \u0026lt;REPLACE_LAMBDA_FUNCTION_NAME\u0026gt; --region \u0026lt;REPLACE_REGION\u0026gt; --statement-id PolicyDocument --action \u0026#34;lambda:InvokeFunction\u0026#34; --principal s3.amazonaws.com --source-arn arn:aws:s3:::\u0026lt;REPLACE_S3_BUCKET_NAME\u0026gt; --source-account \u0026lt;REPLACE_AWS_ACCOUNT_ID\u0026gt; --profile Repalce \u0026lt;REPLACE_LAMBDA_FUNCTION_NAME\u0026gt; with the name of the Lambda Function whose name starts with ImageManagerDemo-TestLambda ( the Lambda Function was created from CloudFomation in the section 4.2) Repalce \u0026lt;REPLACE_S3_BUCKET_NAME\u0026gt; with idevelop-imagemanager-\u0026lt;YOUR_ACCOUNT_ID\u0026gt; (The name of the S3 bucket was created from CloudFomation in the section 4.2) Repalce \u0026lt;REPLACE_AWS_ACCOUNT_ID\u0026gt; with your AWS Account Id\n4. if you recheck, you will see the S3 trigger listed. "},{"uri":"https://hotloncon1.github.io/aws-lab000052/2-prepare/2.3-connectvirtualmachine/","title":"Connect to the Windows Instance","tags":[],"description":"","content":"Connect to the Windows Instance Go to Amazon EC2 console. Select Intances. Type DevAxWindowsHost to the search bar and press Enter Select DevAxWindowsHost. Click Connect. In the Connect to instance page Click tab RDP client. Click Download remote desktop file. We will download file remote desktop to the folder contains the key pair. Click Get password. In the Get Windows password page: Click Browse. Select file KPforDevAxInstances.pem we downloaded in the section 2.1. Click Decrypt Password to decrypt the password. Copy decrypted password. Open file DevAxWindowsHost.rdp we downloaded in the step 2. Click Connect. Type the password we copied in the step 4 Click OK. Click Don’t ask me again for connections to this computer. Click Yes. Connect successfully. Configure AWS CLI Assign the Administrator Access to user awsstudent was created by Cloud Formation template Go to AWS IAM Console. Click Users. Type awsstudent to the search bar Click user awsstudent In the Permissions policies section Click Add permissions In the Add permissions to awsstudent page Click Attach existing policies directly Type AdministratorAccess to the search bar. Select AdministratorAccess Click Next:Review Click Add Permission Click tab Security credentials Click Create access key to create the access key Click Download .csv file to save the Access key and the Secret access key to use in the next steps Execute the following command: aws configure set profile.devaxacademy.region \u0026lt;your_region\u0026gt; aws configure set profile.devaxacademy.aws_access_key_id \u0026lt;access_key_id\u0026gt; aws configure set profile.devaxacademy.aws_secret_access_key \u0026lt;secret_access_key\u0026gt; Replace \u0026lt;your_region\u0026gt; with your Region code Replace \u0026lt;access_key_id\u0026gt; with Access Key Id we saved in the step 6\nReplace \u0026lt;secret_access_key\u0026gt; with Secret Access Key we saved in the step 6\nConfigure Eclipse IDE Open Eclipse IDE in the Windows virtual machine. Click Use this as the default and do not ask again CLick Launch Click Finish Click Restore button. find the AWS Icon, click it to reveal the menu. Click Preferences\u0026hellip; In the Default Profile section, Select devaxacademy Click Apply and Close "},{"uri":"https://hotloncon1.github.io/aws-lab000052/3-create-serverless-microservices/","title":"Create a Serverless Microservice","tags":[],"description":"","content":"Overview In this chapter, we will be creating a Java serverless microservice using AWS Lambda. We will use the AWS Eclipse Toolkit to download a Java Lambda template that we will use as a starting point. We will use this as a starting point to develop our microservice. This microservice will eventually curate and automatically generate thumbnails for an S3 bucket. We will extend this microservice in the next chapter.\nContent: Create and test Lambda function locally Upload and test Lambda function on AWS Lambda "},{"uri":"https://hotloncon1.github.io/aws-lab000052/5-use-codestar-orchestration/5.3-update-target-region/","title":"Update target AWS region for API","tags":[],"description":"","content":"Update target AWS region for API The swagger.yml file provided in the zip bundle is the definition for the API that exposes the microservice via Amazon API Gateway. It needs to be updated with details of your lab AWS Account Id and target AWS Region before you can deploy your microservice.\nIn the Eclipse IDE, open the swagger.yml file Press Ctrl+F shortcut In the Find section, type \u0026lt;REGION\u0026gt; In the Replace with section, type your Region Click Replace All to replace Do the same as the step 1 to relace \u0026lt;ACCOUNTID\u0026gt; with your AWS Account Id Save In the Command Prompt, execute the following command to configure your git client C:\\Users\\Administrator\\git\\dev-flight-svc\u0026gt;git config --global user.name \u0026#34;awsstudent\u0026#34; C:\\Users\\Administrator\\git\\dev-flight-svc\u0026gt;git config --global user.email \u0026#34;\u0026lt;YOUR_EMAIL\u0026gt;\u0026#34; Replace \u0026lt;YOUR_EMAIL\u0026gt; with your email\n4. Execute the following command to review the changed code files\ngit status 5. Execute the below command to add in the changed files\ngit add . git commit -m \u0026#34;Baseline implementation\u0026#34; 6. Execute the below command to switch back to the master branch\ngit checkout master 7. Execute the below command to merge the changes for your new-implementation branch into the master branch\ngit merge new-implementation 8. In the Eclipse IDE, right-click on the dev-flight-svc project\nClick Team Click Push to origin. Click Close Go to Amazon EC2 console. Click Security Groups. Type DBSecurityGroup to the search bar Enter Select DBSecurityGroup Click tab Inbound rules Click Edit inbound rules In the Source section, select DBSecurityGroup Click Save rules Go to AWS CodeStar Console. Click Projects Click dev-flight-svc Click View application When the page opens, you should see an error {\u0026ldquo;message\u0026rdquo;:\u0026ldquo;Missing Authentication Token\u0026rdquo;}. This is to be expected, since you are attempting to hit the root of the API, rather than a specific microservice. Edit the URL in the browser to add flightspecials to the end of the URL We will see the result like: "},{"uri":"https://hotloncon1.github.io/aws-lab000052/4-extending-serverless-microservices/","title":"Extending Serverless Microservices","tags":[],"description":"","content":"Overview In this exercise, you will use the Eclipse IDE to edit the source code from the first exercise and redeploy your Lambda function.\nContent: Deploy ImageManager Lambda Function Automating Your Serverless Microservice (Optional) - Update Lambda function permissions "},{"uri":"https://hotloncon1.github.io/aws-lab000052/2-prepare/2.4-setups3/","title":"Setup S3 buckets","tags":[],"description":"","content":"Setup S3 buckets You need to setup two buckets. One bucket will contain uploaded lambda functions, the other bucket will be used to store images. You can create S3 bucket from the AWS Console, or from the command line\nOpen Command Prompt Execute the following command: aws s3 mb s3://idevelop-sourcecode-\u0026lt;yourinitials\u0026gt; --region \u0026lt;region\u0026gt; --profile devaxacademy aws s3 mb s3://idevelop-imagemanager-\u0026lt;yourinitials\u0026gt; --region \u0026lt;region\u0026gt; --profile devaxacademy Replace \u0026lt;yourinitials\u0026gt; with your name to create unique name for your bucket.\nReplace \u0026lt;region\u0026gt; with your region.\n3. Go to AWS S3 Console.\nType idevelop to the search bar, we will see two buckets "},{"uri":"https://hotloncon1.github.io/aws-lab000052/5-use-codestar-orchestration/","title":"Configure orchestration with CodeStar","tags":[],"description":"","content":"Overview In this chapter we will automate our deployment of the Lambda serverless microservice with AWS CodeStar\nContent: Create a new branch Redeploy through the CI/CD pipeline Update target AWS region for API "},{"uri":"https://hotloncon1.github.io/aws-lab000052/6-challenge/","title":"Challenge - Expose the microservice API","tags":[],"description":"","content":"Challenge - Expose the microservice API HotelSpecial class HotelSpecial.java (1 KB) Copy the HotelSpecial.java file to the folder whose path is …/src/main/java/devlounge/model in the dev-flight-svc project template file template.yml (6 KB) Replace the contents of the template.yml file in the dev-flight-svc project with the content of the above template.yml file Do the same as the step 11, 12, 13, 14 and 15 in the section 5.2 to update the template.yml file in the dev-flight-svc project swagger file swagger.yml (4 KB) Thay nội dung của file swagger.yml in the dev-flight-svc project bằng nội dung của file swagger.yml bên trên Do the same as the step 1 and 2 in the section 5.3 to update the swagger.yml file in the dev-flight-svc project Trong Command Prompt, chuyển đường dẫn đến project dev-flight-svc Execute the below command to add in the changed files git add . git commit -m \u0026#34;Update implementation\u0026#34; In the Eclipse IDE, right-click on the dev-flight-svc project Click Team Click Push to origin. Click Close Go to AWS CodeStar Console. Click Projects Click dev-flight-svc Click View application Add hotelspecials to the end of the URL and press Enter We will see the following result Bài tập nâng cao tùy chọn Sửa đổi mã nguồn từ phần 3 để phát hiện các loại file khác nhau và xử lý chúng theo cách tùy chọn (ví dụ, chặn và di chuyển chúng tới một thư mục khác) Tạo một hàm Lambda mới thực hiện các task mỗi phút một lần. Task có thể đơn giản như ghi kết quả đầu ra vào CloudWatch Logs. "},{"uri":"https://hotloncon1.github.io/aws-lab000052/7-cleanup/","title":"Clean up resources","tags":[],"description":"","content":"You clean up resources in the following order:\nTerminate EC2 Instance Go to Amazon EC2 console. On the left navigation bar, click Intances. Select DevAxWindowsHost. Click Instance state Click Terminate instance Click Terminate Delete Users Go to AWS IAM Console. Click Users. Type awsstudent to the search bar and press Enter Select awsstudent. Click Delete Type awsstudent to confirm, then click Delete Delete CodeStar Go to AWS CodeStar Console. Click Projects Select dev-flight-svc Click Delete Type delete to confirm, then click Delete to delete Delete S3 bucket Go to AWS S3 Console. Click Buckets Select the S3 bucket whose name starts with idevelop-sourcecode-. Click Empty. Type permanently delete to confirm, then click Empty to delete the data of the S3 bucket. Click Exit to back S3 interface. Click Delete. ) Type the name of the bucket then click Delete bucket to delete S3 bucket. Do the same for the other S3 bucket Delete CloudFormation Stack Go to AWS CloudFormation Console. Select aws-stack-for-Devax-lab03. Click Delete Click Delete stack Delete Lambda function Go to AWS Lambda console. Click Functions. Select TestLambda. Click Actions Click Delete Type delete to confirm, then click Delete to delete Delete RDS Snapshot Go to AWS RDS console. Click Snapshots Select RDS Snapshot was created in this lab Click Actions Click Delete snapshot Click Delete to delete "},{"uri":"https://hotloncon1.github.io/aws-lab000052/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://hotloncon1.github.io/aws-lab000052/tags/","title":"Tags","tags":[],"description":"","content":""}]